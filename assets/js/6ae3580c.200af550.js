"use strict";(self.webpackChunkarklight_docs=self.webpackChunkarklight_docs||[]).push([[330],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,y=u["".concat(s,".").concat(h)]||u[h]||p[h]||i;return a?n.createElement(y,o(o({ref:t},d),{},{components:a})):n.createElement(y,o({ref:t},d))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2648:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},o="Data Replication and Events",l={unversionedId:"replication",id:"replication",title:"Data Replication and Events",description:'"What?"',source:"@site/docs/replication.md",sourceDirName:".",slug:"/replication",permalink:"/ProfileSync/docs/replication",draft:!1,editUrl:"https://github.com/nSpected/ProfileSync/docs/replication.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ProfileSync/docs/intro"},next:{title:"DataService - Server Functions",permalink:"/ProfileSync/docs/category/dataservice---server-functions"}},s={},c=[{value:"&quot;What?&quot;",id:"what",level:3},{value:"&quot;Why use ProfileSync when I can request data directly from the server?&quot;",id:"why-use-profilesync-when-i-can-request-data-directly-from-the-server",level:3},{value:"&quot;Okay, but what about when a data changes? How can I detect that?&quot;",id:"okay-but-what-about-when-a-data-changes-how-can-i-detect-that",level:3},{value:"Possible Use Case",id:"possible-use-case",level:2},{value:"Example",id:"example",level:2},{value:"Server:",id:"server",level:3},{value:"Client:",id:"client",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-replication-and-events"},"Data Replication and Events"),(0,r.kt)("h3",{id:"what"},'"What?"'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ProfileSync")," handles all data replication for you, streamlining the process. "),(0,r.kt)("h3",{id:"why-use-profilesync-when-i-can-request-data-directly-from-the-server"},'"Why use ProfileSync when I can request data directly from the server?"'),(0,r.kt)("p",null,"The answer is straightforward: ProfileSync allows you to simply request the latest data through the DataController. As soon as the data is changed on the server, it's automatically updated on the client side, thanks to a remote event that transmits the most recent updates. This ensures you always have access to up-to-date information without the need for manual requests."),(0,r.kt)("h3",{id:"okay-but-what-about-when-a-data-changes-how-can-i-detect-that"},'"Okay, but what about when a data changes? How can I detect that?"'),(0,r.kt)("p",null,"ProfileSync's DataService and DataController both feature a ",(0,r.kt)("inlineCode",{parentName:"p"},'"Changed"')," signal event that triggers whenever data is updated. On the client side, the event passes the arguments ",(0,r.kt)("inlineCode",{parentName:"p"},"(PlayerData: {}, DataName: string)"),", while on the server side, the arguments are ",(0,r.kt)("inlineCode",{parentName:"p"},"(Player: Player, PlayerData: {}, DataName: string)"),". You can connect this signal to a function in any script or local script to monitor changes in real-time."),(0,r.kt)("p",null,"It's important to note that you cannot connect a server script to the client's ",(0,r.kt)("inlineCode",{parentName:"p"},'"Changed"')," event and vice versa. Additionally, the client's ",(0,r.kt)("inlineCode",{parentName:"p"},'"Changed"')," event is fired only for the ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalPlayer")," by default, but you can modify this behavior if needed."),(0,r.kt)("h2",{id:"possible-use-case"},"Possible Use Case"),(0,r.kt)("p",null,"Imagine you have an ",(0,r.kt)("strong",{parentName:"p"},"inventory panel")," that needs to be updated whenever the player's inventory data changes. With the ",(0,r.kt)("inlineCode",{parentName:"p"},'"Changed"')," event, this is easily achievable! "),(0,r.kt)("p",null,"Just connect to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataController.Changed")," event, and when it fires, check ",(0,r.kt)("inlineCode",{parentName:"p"},'if DataName == "Inventory"'),". If it does, update the inventory accordingly. You can even use the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlayerData")," argument to access the inventory data or request it using ",(0,r.kt)("inlineCode",{parentName:"p"},'DataController:GetData(Player, "Inventory")')," within your function to refresh the panel."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In this example, the server will be adding 50 Gems to the Player every second, which then will be printed by the client once it is replicated and fired through the signal, and warned on the server once it has been changed."),(0,r.kt)("admonition",{title:"Just An Example",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This will not run in studio if you just paste it there, the example is just to show how you can connect the signal to detect changes and does not work by itself as the Player object is nil here.")),(0,r.kt)("h3",{id:"server"},"Server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  task.spawn(function()\n    while task.wait(1) do\n      if not DataService.Server_Initialized then return end -- Just to remember to only call service methods after the server has been initialized.\n      DataService:Add(Player, "Gems", 50)\n    end\n  end)\n\n  DataService.Changed:Connect(function(Player : Player, PlayerData : {}, DataName : string)\n    warn(Player, PlayerData[DataName], DataName) -- Output: PlayerName, GemsAmount, "Gems"\n  end)\n')),(0,r.kt)("h3",{id:"client"},"Client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  DataController.Changed:Connect(function(PlayerData : {}, DataName : string)\n    print(PlayerData[DataName], DataName) -- Output: GemsAmount, "Gems"\n  end)\n')))}p.isMDXComponent=!0}}]);