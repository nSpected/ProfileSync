"use strict";(self.webpackChunkarklight_docs=self.webpackChunkarklight_docs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},l="\ud83c\udf1f Introduction",o={unversionedId:"intro",id:"intro",title:"\ud83c\udf1f Introduction",description:"profile-sync-banner",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/ProfileSync/docs/intro",draft:!1,editUrl:"https://github.com/nSpected/ProfileSync/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Data Replication and Events",permalink:"/ProfileSync/docs/replication"}},s={},c=[{value:"\ud83d\ude80 Getting Started",id:"-getting-started",level:2},{value:"\ud83d\udce6 What you&#39;ll need",id:"-what-youll-need",level:3},{value:"\ud83d\udee0\ufe0f Setting up",id:"\ufe0f-setting-up",level:2},{value:"\ud83d\udd27 No Knit - Required Extra Steps",id:"-no-knit---required-extra-steps",level:2},{value:"\ud83d\udca1 Usage Example - KNIT",id:"-usage-example---knit",level:2},{value:"\ud83c\udf10 SERVER:",id:"-server",level:3},{value:"\ud83d\udda5\ufe0f CLIENT:",id:"\ufe0f-client",level:3},{value:"\ud83d\udca1 Usage Example - NO KNIT",id:"-usage-example---no-knit",level:2},{value:"\ud83c\udf10 SERVER:",id:"-server-1",level:3},{value:"\ud83d\udda5\ufe0f CLIENT:",id:"\ufe0f-client-1",level:3}],u={toc:c},d="wrapper";function p(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-introduction"},"\ud83c\udf1f Introduction"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"profile-sync-banner",src:n(9374).Z,width:"1920",height:"635"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ProfileSync")," is a powerful and user-friendly Profile Managing module designed to streamline the setup and replication of Player Data in your Roblox games. By leveraging the reliability of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MadStudioRoblox/ProfileService"},"ProfileService"),", ProfileSync ensures that your game can handle high volumes of data with ease."),(0,r.kt)("p",null,"ProfileSync offers seamless synchronization between Server and Client data, allowing for real-time updates without the need for remote functions. This ensures that your game's players always have access to the latest data, while you can focus on creating an engaging and immersive experience. Unlock the full potential of data management in your Roblox projects with ProfileSync!"),(0,r.kt)("h2",{id:"-getting-started"},"\ud83d\ude80 Getting Started"),(0,r.kt)("p",null,"Get started by getting the module from one of these sources: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/nSpected/ProfileSync/releases"},"Github"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://www.roblox.com/library/13397074576/ProfileSync-v1-0-1"},"Roblox Library")))),(0,r.kt)("h3",{id:"-what-youll-need"},"\ud83d\udce6 What you'll need"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/Sleitnick/Knit"},"Knit")," v1.5.1 or above"),", if you choose to go with the Knit version."),(0,r.kt)("li",{parentName:"ul"},"Some scripting knowledge, as this is only a small module that aims to make it a bit more practical to set and get data from both client and server, but it does not do anything by itself.")),(0,r.kt)("h2",{id:"\ufe0f-setting-up"},"\ud83d\udee0\ufe0f Setting up"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Drag and drop the ",(0,r.kt)("inlineCode",{parentName:"li"},".rbxm")," file into your place, or find it in the Roblox Library (Toolbox) and add it to your game."),(0,r.kt)("li",{parentName:"ul"},"Ungroup the version you're going to use, placing it in the ",(0,r.kt)("inlineCode",{parentName:"li"},"ReplicatedStorage"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If you are using the ",(0,r.kt)("inlineCode",{parentName:"li"},"Knit")," framework, you may already have designated folders for your Services and Controllers. In this case, move the ",(0,r.kt)("inlineCode",{parentName:"li"},"DataController")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"DataService")," modules to their respective folders.")))),(0,r.kt)("admonition",{title:"You're All Set!",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For those using Knit, you're all set! \u2705 The module will initialize automatically when Knit starts \ud83d\ude80, and you're ready to take advantage of ",(0,r.kt)("strong",{parentName:"p"},"ProfileSync")," in your Roblox project \ud83d\udd79\ufe0f.")),(0,r.kt)("h2",{id:"-no-knit---required-extra-steps"},"\ud83d\udd27 No Knit - Required Extra Steps"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is only for those who are not using Knit!")),(0,r.kt)("p",null,"You need to require the module manually in both client and server, you can do it by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inside a script in ",(0,r.kt)("inlineCode",{parentName:"li"},"ServerScriptService")," require the ",(0,r.kt)("strong",{parentName:"li"},"DataService")," module, and run the ",(0,r.kt)("inlineCode",{parentName:"li"},":Init()")," function:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local DataService = require(Path.To.DataService) -- Change this to the DataService module.\nDataService:Init()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now, inside a LocalScript in ",(0,r.kt)("inlineCode",{parentName:"li"},"StarterPlayerScripts"),", require the ",(0,r.kt)("strong",{parentName:"li"},"DataController")," module, and run the ",(0,r.kt)("inlineCode",{parentName:"li"},":Init()")," function:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local DataController = require(Path.To.DataController) -- Change this to the DataController module.\nDataController:Init()\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud83c\udf89 ",(0,r.kt)("strong",{parentName:"li"},"You're all set now!"))),(0,r.kt)("h2",{id:"-usage-example---knit"},"\ud83d\udca1 Usage Example - KNIT"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Since you probably want to use the actual benefits of this module, here's an example of how you can use it:")),(0,r.kt)("h3",{id:"-server"},"\ud83c\udf10 SERVER:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  -- SERVICES --\n  local RS = game:GetService("ReplicatedStorage")\n  local Players = game:GetService("Players")\n\n  -- FRAMEWORKS --\n  local Knit = require(RS.Packages.Knit)\n\n  -- SERVICES --\n  local Services = Knit.AddServices(RS.Services)\n\n  -- STARTING KNIT --\n  Knit.Start():andThen(function()\n    print("[SERVER] Knit Started.")\n    \n    local DataService = Knit.GetService("DataService")\n    \n    task.spawn(function()\n      while task.wait(1) do\n        DataService:Add(Players:GetPlayers()[1], "Coins", 100)\n      end   \n    end)    \n  end):catch(warn)\n')),(0,r.kt)("h3",{id:"\ufe0f-client"},"\ud83d\udda5\ufe0f CLIENT:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  -- SERVICES --\n  local RS = game:GetService("ReplicatedStorage")\n\n  -- FRAMEWORKS --\n  local Knit = require(RS.Packages.Knit)\n\n  -- CONTROLLERS --\n  local Controllers = Knit.AddControllers(RS.Controllers)\n\n  -- STARTING KNIT --\n  Knit.Start():await()\n\n  -- DATA CONTROLLER --\n  local DataController = Knit.GetController("DataController")\n\n  -- TEST --\n  DataController.Changed:Connect(function(Player_Data : {}, DataName : string)\n      print(game.Players.LocalPlayer, "\'s [", DataName, "] has been changed to: ", Player_Data[DataName])\n  end)\n')),(0,r.kt)("h2",{id:"-usage-example---no-knit"},"\ud83d\udca1 Usage Example - NO KNIT"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"And here's an example of how you can use it without Knit:")),(0,r.kt)("h3",{id:"-server-1"},"\ud83c\udf10 SERVER:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  -- SERVICES --\n  local RS = game:GetService("ReplicatedStorage")\n  local Players = game:GetService("Players")\n\n  -- MODULES --\n  local DataService = require(RS.DataService) -- Change to your path.\n  DataService:Init()\n\n  -- TEST --\n  task.spawn(function()\n    while task.wait(1) do\n      if DataService.Initialized == false then return end -- If the Service has not been initialized yet, we don\'t do anything.\n      DataService:Add(Players:GetPlayers()[1], "Coins", 100) -- This will increase the player\'s coins by 100 every 1 second once his data has been loaded.\n    end   \n  end)\n')),(0,r.kt)("h3",{id:"\ufe0f-client-1"},"\ud83d\udda5\ufe0f CLIENT:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'  -- SERVICES --\n  local RS = game:GetService("ReplicatedStorage")\n\n  -- CONTROLLERS --\n  local DataController = require(RS:WaitForChild("DataController"))\n  DataController:Init() -- Initialize the Client.\n\n  -- TEST --\n  DataController.Changed:Connect(function(Player_Data : {}, DataName : string)\n      print(game.Players.LocalPlayer, "\'s [", DataName, "] has been changed to: ", Player_Data[DataName])\n  end)\n')))}p.isMDXComponent=!0},9374:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ps-banner-baf340f8270979ef37e21ac4eb719fd6.png"}}]);